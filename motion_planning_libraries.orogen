name "motion_planning_libraries"

using_library "envire"
using_library "motion_planning_libraries"

import_types_from "base"
import_types_from "envire"	
import_types_from "motion_planning_librariesTypes.hpp"
import_types_from "motion_planning_libraries/Config.hpp"
import_types_from "motion_planning_libraries/State.hpp"

task_context "Task" do
    needs_configuration

    property("traversability_map_id", "std/string", "/traversability").
        doc("Try to extract this map, otherwise the first trav map will be used.")
        
    property("config", "motion_planning_libraries/Config").
        doc("Motion planning configuration file.")
    
    property("planning_time_sec", "double", 10).
        doc("Maximal allowed planning time per cycle.")

    input_port('traversability_map', ro_ptr('std/vector</envire/BinaryEvent>')).
        doc("Traversability map. Has to be received once before planning can be executed.")

    input_port('start_state', '/motion_planning_libraries/State').
        doc("Defines the start state.")
        
    input_port('goal_state', '/motion_planning_libraries/State').
        doc("Defines the goal state.")
        
    input_port('start_pose_samples', 'base/samples/RigidBodyState').
        doc("Start pose in the world, using x and y and yaw. If the start state port is not connected this port will be used.")
        
    input_port('goal_pose_samples', 'base/samples/RigidBodyState').
        doc("Goal pose in the world, using x and y and yaw. If the start state port is not connected this port will be used.")
        
    output_port('waypoints', '/std/vector<base::Waypoint>').
        doc "Waypoint list."

    output_port("trajectory", "std::vector</base/Trajectory>").
        doc("Spline format.")
        
    output_port("states", "std::vector</motion_planning_libraries/State>").
        doc("List of motion_planning_libraries states")
        
    output_port('start_pose_samples_debug', 'base/samples/RigidBodyState').
        doc("Currently used start pose")
        
    output_port('goal_pose_samples_debug', 'base/samples/RigidBodyState').
        doc("Currently used goal pose")

    runtime_states :MISSING_START_STATE, :MISSING_GOAL_STATE, :MISSING_TRAVERSABILITY_MAP, 
            :PLANNING_FAILED, :ERRONEOUS_STATES, :UNDEFINED_ERROR
        
    #port_driven 'traversability_map', 'goal_pose_samples'
    periodic 1.0
end

task_context "Test" do
    needs_configuration
    
    property("traversability_map_type", 'motion_planning_libraries/TRAV_MAP_MODE', 'RANDOM_CIRCLES').
        doc("Type of trav map which should be created.")

    property("traversability_map_id", "std/string", "/traversability").
        doc("ID which will be assigned to the trav map.")

    property("traversability_map_width_m", 'unsigned int', 30).
        doc("Width of the traversability map in meter.")
        
    property("traversability_map_height_m", 'unsigned int', 30).
        doc("Height of the traversability map in meter.")
        
    property("traversability_map_scalex", 'double', 0.1).
        doc("Width of a cell in meter.")
        
    property("number_of_random_circles", 'int', 10).
        doc("Width of a cell in meter.")
        
    property("traversability_map_scaley", 'double', 0.1).
        doc("Height of a cell in meter.")
        
    property("opening_length", 'double', 2.0).
        doc("Defines the length (wall runs along the y-axis) of the opening in meter for the environment SMALL_OPENING.")   
        
    property("footprint_min", 'double', 0.5).
        doc("Smallest footprint")
        
    property("footprint_max", 'double', 2.0).
        doc("Smallest footprint")

    output_port('traversability_map', ro_ptr('std/vector</envire/BinaryEvent>')).
        doc("Traversability map. Has to be received once before planning can be executed.")    
        
    output_port('start_state', '/motion_planning_libraries/State').
        doc("Start pose in the world, using x and y and yaw.")
        
    output_port('goal_state', '/motion_planning_libraries/State').
        doc("Goal pose in the world, using x and y and yaw.")
end

