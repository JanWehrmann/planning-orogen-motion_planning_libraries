name "global_path_planner"

using_library "envire"
using_library "global_path_planner"

import_types_from "base"
import_types_from "envire"	
import_types_from "global_path_plannerTypes.hpp"

task_context "Task" do
    needs_configuration

    property("traversability_map_id", "std/string", "/traversability").
        doc("Try to extract this map, otherwise the first trav map will be used.")
        
    property("sbpl_env_file", "std/string").
        doc("SBPL environment file")
        
    property("sbpl_motion_primitives_file", "std/string").
        doc("SBPL motion primitives file")

    input_port('traversability_map', ro_ptr('std/vector</envire/BinaryEvent>')).
        doc("Traversability map. Has to be received once before planning can be executed.")

    input_port('start_pose_samples', 'base/samples/RigidBodyState').
        doc("Start pose in the world, using x and y and yaw.")
        
    input_port('goal_pose_samples', 'base/samples/RigidBodyState').
        doc("Goal pose in the world, using x and y and yaw.")

    output_port('path', '/std/vector<base::Waypoint>').
        doc "Waypoint list.."
        
    output_port('samples', '/std/vector<base::Waypoint>').
        doc "Contains all valid samples"

    output_port("trajectory", "std::vector</base/Trajectory>").
        doc("Spline format.")
        
    output_port('debug_start_pose_samples', 'base/samples/RigidBodyState').
        doc("Current start position")
        
    output_port('debug_goal_pose_samples', 'base/samples/RigidBodyState').
        doc("Current goal position")
        
    output_port('waypoint_start', 'base/Waypoint').
        doc "Start pose converted to a waypoint."
        
    output_port('waypoint_goal', 'base/Waypoint').
        doc "Goal pose converted to a waypoint."

    #port_driven 'traversability_map', 'goal_pose_samples'
    periodic 10.0
end

task_context "Test" do
    needs_configuration
    
    property("traversability_map_type", 'global_path_planner/TRAV_MAP_MODE', 'RANDOM_CIRCLES').
        doc("Type of trav map which should be created.")

    property("traversability_map_id", "std/string", "/traversability").
        doc("ID which will be assigned to the trav map.")

    property("traversability_map_width_m", 'unsigned int', 30).
        doc("Width of the traversability map in meter.")
        
    property("traversability_map_height_m", 'unsigned int', 30).
        doc("Height of the traversability map in meter.")
        
    property("traversability_map_scalex", 'double', 0.1).
        doc("Width of a cell in meter.")
        
    property("number_of_random_circles", 'int', 10).
        doc("Width of a cell in meter.")
        
    property("traversability_map_scaley", 'double', 0.1).
        doc("Height of a cell in meter.")

    output_port('traversability_map', ro_ptr('std/vector</envire/BinaryEvent>')).
        doc("Traversability map. Has to be received once before planning can be executed.")

    output_port('start_pose_samples', 'base/samples/RigidBodyState').
        doc("Start pose in the world, using x and y and yaw.")
        
    output_port('goal_pose_samples', 'base/samples/RigidBodyState').
        doc("Goal pose in the world, using x and y and yaw.")
end

